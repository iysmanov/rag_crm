import os
import tempfile
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile
from aiogram.utils.markdown import hbold
from config import Config
from rag_engine import KnowledgeBaseRAG
from ocr_engine import extract_text_from_image
from gpt_engine import generate_answer
from logger import log_message
from crm_database import CRMDatabase

import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–≤–∏–∂–∫–æ–≤
bot = Bot(token=Config.TELEGRAM_BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher()
rag = KnowledgeBaseRAG(Config.KNOWLEDGE_BASE_PATH)
crm_db = CRMDatabase()

async def split_and_send(message: types.Message, text: str):
    """–î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏."""
    max_len = Config.MAX_ANSWER_LENGTH
    for i in range(0, len(text), max_len):
        await message.answer(text[i:i+max_len])

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏ WAY2fit.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "üìã –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Å—Ç—É–¥–∏–∏\n"
        "üë§ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç\n"
        "‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/rules - –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç—É–¥–∏–∏\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
    )

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    schedule = crm_db.get_schedule()
    if schedule.empty:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üòî")
        return

    response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for _, row in schedule.iterrows():
        response += (
            f"üïí {row['StartTime'].strftime(Config.TIME_FORMAT)} - "
            f"{row['EndTime'].strftime(Config.TIME_FORMAT)}\n"
            f"üèãÔ∏è {row['ClassName']}\n"
            f"üë§ –¢—Ä–µ–Ω–µ—Ä: {row['TrainerName']}\n"
            f"üìç –ó–∞–ª: {row['RoomName']}\n"
            f"üë• –ú–µ—Å—Ç: {row['CurrentBookings']}/{row['MaxCapacity']}\n\n"
        )
    
    await split_and_send(message, response)

@dp.message(Command("rules"))
async def cmd_rules(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç—É–¥–∏–∏."""
    rules = crm_db.get_studio_rules()
    if rules.empty:
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üòî")
        return

    response = "üìã –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç—É–¥–∏–∏:\n\n"
    current_category = None
    for _, row in rules.iterrows():
        if current_category != row['RuleCategory']:
            current_category = row['RuleCategory']
            response += f"\nüîπ {current_category}:\n"
        response += f"‚Ä¢ {row['RuleDescription']}\n"
    
    await split_and_send(message, response)

@dp.message(Command("check"))
async def cmd_check(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX"
    )

@dp.message(F.text.regexp(r'^\+7\d{10}$'))
async def check_membership(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    phone = message.text
    client_info = crm_db.get_client_info(phone)
    
    if client_info.empty:
        await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    client = client_info.iloc[0]
    response = (
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n\n"
        f"–ò–º—è: {client['FirstName']} {client['LastName']}\n"
        f"–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {client['MembershipType']}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {client['ExpiryDate'].strftime(Config.DATE_FORMAT)}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {client['RemainingClasses']}"
    )
    
    await message.answer(response)

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = message.from_user.id
    user_text = message.text or ""
    ocr_text = ""

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –¥–µ–ª–∞–µ–º OCR
    if message.photo:
        photo = message.photo[-1]
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            await photo.download(destination=tmp.name)
            ocr_text = extract_text_from_image(tmp.name)
            os.unlink(tmp.name)
    elif message.document and message.document.mime_type.startswith('image/'):
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            await message.document.download(destination=tmp.name)
            ocr_text = extract_text_from_image(tmp.name)
            os.unlink(tmp.name)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ OCR –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    full_query = '\n'.join([user_text, ocr_text]).strip()
    if not full_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    kb_chunks = rag.search(full_query, top_k=Config.MAX_CONTEXT_CHUNKS)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    answer = generate_answer(full_query, kb_chunks)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_message(user_id, full_query, answer)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await split_and_send(message, answer)

if __name__ == "__main__":
    try:
        asyncio.run(dp.start_polling(bot))
    finally:
        crm_db.close() 